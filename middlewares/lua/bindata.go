// Code generated by go-bindata.
// sources:
// prelude.lua
// DO NOT EDIT!

package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _preludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcf\x8f\x9c\x36\x14\xbe\xf3\x57\x7c\xa1\x87\x05\x15\x48\x72\xc8\xa5\x5a\x22\x55\xcd\xaa\x3d\x44\x6a\xd5\xa6\xa7\x28\x42\xc6\x3c\x66\xbc\x63\x6c\x6a\x9b\x9d\x6c\xa3\xed\xdf\x5e\xd9\x86\x81\x9d\xcc\x36\x7b\xe8\x4a\x3b\x63\xe0\x7b\xdf\xfb\xde\x4f\xa6\x2c\xc1\x25\xb3\xb6\x92\x13\x4b\xca\x12\x3f\xe9\x61\x64\x4e\xb4\x92\x70\x14\x6e\x8f\xf7\x13\xc3\x9b\xea\x35\x32\xa5\x1d\xde\x54\xaf\xf2\x2a\xe9\x27\xc5\x9d\xd0\x2a\x1a\x66\x2d\xb3\x54\x40\x28\xe1\xf2\x04\x90\x9a\x33\x09\x8e\x1a\x5f\x1e\x50\x96\x60\x50\x74\x8c\x48\x08\x65\x1d\x53\x9c\x12\x40\xf4\xf0\x84\xde\x0a\x4c\x75\x70\xf7\x23\x05\xa6\x1c\x75\x8d\x74\x71\x91\xc2\xed\x49\x25\x00\x22\xb4\x86\xc7\x84\x6b\x7f\x40\x0d\x25\x64\x02\x90\xb4\x24\xfa\x73\x16\xc7\x5a\x49\x1b\x8a\xb2\x84\x9e\xcc\x56\x90\x05\x83\xdd\x33\x29\xf5\x11\x5c\x8f\xf7\xd0\xbd\x87\x47\xf2\x80\x79\x11\x2c\x7b\x6d\x20\x0a\xdc\x41\x28\x8c\x4c\x18\x3b\x7b\xe9\x74\x78\x0c\xf0\x8f\xe2\x13\x6a\xdc\x85\x4b\x52\x5d\xf8\xe6\x55\x33\xab\x9c\x55\xc7\x07\x65\x19\x7c\x44\x09\x47\x21\x25\x5a\x0a\x77\x06\x72\x2c\x68\x0e\xfe\x98\x94\x10\xce\x42\xb7\xb7\xc4\x9d\x2d\xa2\x65\x48\xd6\x9e\xee\xa3\xa1\xd4\xfa\x80\x69\xf4\x77\x84\xf1\xf6\x7b\xdd\xf9\x3c\x43\xb8\x2a\x09\x02\x1a\xa1\x3a\xfa\x8c\x1a\x3c\x89\x04\xf4\x79\xd4\x96\xc0\xc0\xb5\xb2\xce\x4c\xdc\x69\x83\xe3\x5e\xf0\x3d\x38\x53\x5e\x0a\x67\x52\x52\x87\xf6\x1e\xd7\x41\xa3\x62\x03\xbd\xcd\xae\x99\xd9\xd9\xb7\x6b\x89\x07\x17\x6a\x9c\x00\x83\xab\x9a\xc6\x1b\xa1\xc6\x52\xb8\x2c\x58\x36\xae\x95\x05\xaa\xaa\xca\x43\x3e\xa2\xa1\x6e\x6f\x17\x4b\xc0\x92\x3b\x45\x9d\xe9\xf6\xb6\x00\x8f\x58\xd1\xc7\x8a\x9f\x8a\x17\x3b\x20\x62\x4e\x8c\xbe\xee\xf3\xd3\xb2\xc4\xc0\x0e\x04\x3b\x19\x9f\x4d\xe6\xfb\xea\x1e\xd6\x4d\x7d\x8f\xde\xe8\xe1\xac\xae\xbe\xf6\x9e\x50\x30\x29\xfe\xa6\xee\xc5\xe2\xa3\x8f\x18\x9f\x66\x7f\xa8\xce\x45\x60\xbd\x7d\xa6\x65\xad\xfb\xf2\x6d\xc8\x4d\x46\xf9\x80\x4f\xb5\xe7\xd5\xdc\xc7\xfe\x2b\x5e\xdb\x86\x6d\x13\x67\x49\xf6\x05\x0e\x5e\xe3\x36\x6b\x03\x6a\xec\xb6\xc9\xf2\xb8\x08\x38\xee\x85\x24\x0c\x6b\x33\x8a\xde\xc3\xeb\x48\xf2\x58\xfc\x2c\xc9\x99\x89\xce\x44\x23\xb8\x18\x62\xcb\x5e\x0a\xa3\x67\x72\xd3\xc4\x8f\x0a\xc7\x0b\x0c\x61\xfa\x67\x28\x4f\x3c\x28\x89\xca\xd9\x38\x92\xea\x1a\x26\x65\xb2\x1e\xb7\x11\xb7\x53\xdf\x93\x39\x65\x32\xcc\x1a\x6a\xbc\x2e\x60\x49\x12\x77\x59\xfa\x5d\x1a\x9f\x2e\x21\x06\xaf\x95\x50\x96\x8c\x3b\x99\x67\x33\x5a\x44\x6c\x9e\xcf\x5a\xfd\x7f\x54\x72\xa7\x45\xd7\x38\xb6\xb3\xbe\xff\xfc\x12\x1a\x76\xa8\x43\x2e\xfc\x70\xb5\x66\x73\x21\xd4\x38\xb9\xf9\x3a\x79\x98\xed\xdb\x49\xc8\x40\x90\x9c\x4e\xdb\x38\x1c\xdb\x35\x7e\x56\x0a\xe8\xd1\xd9\x75\x52\xa2\xc0\xd9\x27\x90\x5e\xa7\xc5\x1c\x45\xc4\x27\xc0\x43\x5c\x89\x61\x7f\x05\xe3\x8b\xfb\xcb\x67\xe6\xf0\x68\x0b\x45\xec\xb6\xf0\x81\xe2\x90\xe3\x9f\x1a\xa9\x9a\x86\x96\x4c\xfa\xb8\x03\xd6\x1a\x9c\x32\x97\x22\x2d\x3c\xf1\x55\x9d\x5e\x15\xb8\x2b\x70\x95\x5e\x5d\xee\xe9\xf8\x29\xfa\x35\x95\x1f\x97\x28\x3e\xad\x6e\x2e\xba\x78\xf9\x36\xcd\x93\xcd\xc4\x5e\x02\x45\xc8\x73\x52\x71\xd1\x7e\x52\x23\xe3\x87\x68\xf5\xd5\x7e\xb8\x80\x5f\xca\xb4\x46\x79\x49\xd4\xf5\xcb\xb4\xc0\x5a\xdb\x59\x64\xb4\x58\xc6\x29\xf4\x23\xd7\x8a\xb3\xa5\x1f\xf3\x38\x02\x86\x54\x47\xa6\xd9\xbb\xe1\x51\xcb\xf7\x2a\x8f\x33\xd4\x93\xba\xcb\x62\x71\x55\xf1\xf5\x46\x9c\xb5\x7f\x79\x28\x96\xd3\xa9\x8e\xeb\x66\x3f\x5b\x1d\x8b\xd4\xfc\x04\x5d\x47\x78\x41\xae\x91\x9f\x21\x4e\x8d\x7d\xa1\x9b\x97\xbf\x75\x63\x6c\xcf\x71\x9f\x7b\xdc\x66\x11\xf4\x2a\x9b\x13\xf1\xbb\x9e\x9c\x1f\x02\xbf\xf3\xc2\xcf\x06\x3f\xe9\x8b\x1c\x16\xe9\x59\x25\x3a\xd4\x78\x35\x5f\x18\x6f\x62\x97\x77\x85\x67\xc9\x93\xf5\xc7\x47\x24\xfc\x21\x80\xb2\xf8\xe6\x2b\x30\x32\xb7\x2f\xb0\x64\x57\xf6\x91\x70\x39\x7d\x8f\xd7\xcb\xfd\xc8\xfd\x71\x7e\xe2\x5f\xdd\xbd\x6f\xac\xa6\xe1\x86\x98\xa3\xe6\x12\xed\x0c\x9e\x03\x3a\x17\xb2\x23\x97\x9d\xbb\x9f\xd5\xa5\x3f\xdf\x7c\x48\xb7\xe2\x2e\x12\x8c\xda\x3e\xcd\xf0\xdb\xaf\x7f\x3c\x87\x62\xfa\x0f\x86\x3f\x9f\x41\xd0\x91\x24\x47\x4f\x72\xbc\xbb\x79\x7f\xf3\xe1\xe6\xdb\x34\x7b\x62\xdd\x93\x24\xbf\xdc\xfc\xf8\xee\xdb\x14\x93\xa5\xec\x7f\xa8\xe3\x20\xba\x4e\xd2\x91\x99\xf8\xc2\x7c\xba\x7c\xce\x88\xdd\x8e\x4c\x26\xba\x02\x86\xfe\xf2\x1f\x76\xd3\xc8\x5b\x67\xa2\xfb\x94\xad\x90\x38\xe6\x73\x77\xcf\x6c\x59\x9e\xfc\x1b\x00\x00\xff\xff\xf1\xad\xfe\xaa\x58\x0b\x00\x00")

func preludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_preludeLua,
		"prelude.lua",
	)
}

func preludeLua() (*asset, error) {
	bytes, err := preludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prelude.lua", size: 2904, mode: os.FileMode(420), modTime: time.Unix(1525989639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prelude.lua": preludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prelude.lua": &bintree{preludeLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

